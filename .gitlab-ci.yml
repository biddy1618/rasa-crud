stages:
- test
- build
- release
- tagging
- validate
- approve
- deploy

variables:
  ECOSYSTEM: onetech
#  SBT_OPTS: "-Dsbt.boot.credentials=/root/.sbt/.credentials -Dsbt.global.base=sbt-cache/.boot -Dsbt.boot.directory=sbt-cache/.sbtboot -Dsbt.ivy.home=sbt-cache/.ivy -Dsbt.repository.config=/root/.sbt/repositories"
#cache:
#  key: "sbt-cache" # "$CI_PROJECT_PATH_SLUG" # "$CI_PROJECT_PATH_SLUG" project path slug used to cache compile artifacts
#  untracked: true


test:
  stage: test
  image: python:3.7
  script:
  - env

build:
  stage: build
  image: python:3.7
  script:
  - apt-get install -y python libgraphviz-dev graphviz pkg-config
  - pip install -r requirements.txt
  artifacts:
    paths:
    - /
    expire_in: 45min

release_dev:
  stage: release
  image: docker:stable
  services:
  - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  - docker build -t "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA:0:8}" .
  - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA:0:8}"
  only:
    refs:
    - develop
  dependencies:
  - build

release_qa:
  cache: {}
  stage: release
  image: docker:stable
  services:
  - docker:dind
  variables:
    GIT_STRATEGY: none
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  script:
  - export TAG=$(echo "${CI_COMMIT_REF_NAME}" | egrep -o "v[0-9]+(\.[0-9]+)+")-${CI_COMMIT_SHA:0:8}
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  - docker build -t "${CI_REGISTRY_IMAGE}:${TAG}" .
  - docker push "${CI_REGISTRY_IMAGE}:${TAG}"
  only:
  - /^release\/.*$/
  dependencies:
  - build

release_prod:
  cache: {}
  stage: release
  image: docker:stable
  services:
  - docker:dind
  variables:
    GIT_STRATEGY: none
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  - docker build -t "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}" .
  - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
  only:
    refs:
    - /^v(\d+\.)?(\d+\.)?(\*|\d+)$/
  dependencies:
  - build

tagging_dev:
  stage: tagging
  image: registry.dar.kz/cicd/job-images/codemill
  script:
  - /opt/scripts/docker/tagging.sh ${CI_COMMIT_SHA:0:8}
  environment:
    name: dev
  only:
  - develop

tagging_qa:
  stage: tagging
  image: registry.dar.kz/cicd/job-images/codemill
  variables:
    GIT_STRATEGY: none
  script:
  - /opt/scripts/docker/tagging.sh $(echo "${CI_COMMIT_REF_NAME}" | egrep -o "v[0-9]+(\.[0-9]+)+")-${CI_COMMIT_SHA:0:8}
  environment:
    name: qa
  only:
  - /^release\/.*$/

tagging_prod:
  stage: tagging
  image: registry.dar.kz/cicd/job-images/codemill
  variables:
    GIT_STRATEGY: none
  script:
  - /opt/scripts/docker/tagging.sh ${CI_COMMIT_TAG}
  environment:
    name: prod
  only:
  - /^v(\d+\.)?(\d+\.)?(\*|\d+)$/

deploy_to_dev:
  stage: deploy
  image: registry.dar.kz/cicd/job-images/codemill
  script:
  - /opt/scripts/helm/deploy.sh
  environment:
    name: dev
  only:
  - develop

deploy_to_qa:
  stage: deploy
  image: registry.dar.kz/cicd/job-images/codemill
  variables:
    GIT_STRATEGY: none
  script:
  - /opt/scripts/helm/deploy.sh
  environment:
    name: qa
  only:
  - /^release\/.*$/

deploy_to_prod:
  stage: deploy
  image: registry.dar.kz/cicd/job-images/codemill
  variables:
    GIT_STRATEGY: none
  script:
  - /opt/scripts/helm/deploy.sh
  environment:
    name: prod
  only:
  - /^v(\d+\.)?(\d+\.)?(\*|\d+)$/
